{"version":3,"sources":["components/HeaderComponent.js","components/Timer.js","components/ServersTableComponent.js","components/FormComponent.js","components/FooterComponent.js","shared/servers.js","components/MainComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","Jumbotron","className","Timer","state","count","IntervalId","tick","bind","clearInterval","this","myInterval","server","IsRunning","setInterval","setState","console","log","TogglePrice","hour","Math","floor","minutes","seconds","temp","Date","setHours","getHours","getMinutes","getSeconds","Component","ServerTable","RenderServerRow","servers","onClick","TogglerFunction","map","scope","colSpan","ip","servername","Button","color","id","Type","price","Table","responsive","togglerFunction","FormComponent","serverip","servertype","currency","handleInputChange","event","target","value","name","ToggleType","forceUpdate","JSON","stringify","Form","FormGroup","row","Col","md","size","offset","Input","type","onChange","Label","for","placeholder","handleAddServer","Footer","SERVERS","Main","HandleAddServer","serverslist","newid","length","handleToggle","ToggleServer","serverIndex","findIndex","serv","x","parseFloat","toFixed","toString","serverId","splice","bordered","DeleteServer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cf7b034.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Jumbotron } from 'reactstrap';\r\n\r\nfunction Header(props){\r\n    return(\r\n        <Jumbotron>\r\n          <div className=\"container\">\r\n              <div className=\"row row-header\">\r\n                  <div className=\"col-12 col-sm-6\">\r\n                      <h1>Severly Assignment</h1>\r\n                      <p>We take great pride on our servers prices!</p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n      </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Header;","import React , { Component } from 'react';\r\n\r\nclass Timer extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            count : 0,\r\n            IntervalId : 0\r\n        }\r\n        this.tick = this.tick.bind(this);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.state.IntervalId)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        \r\n            {this.myInterval = this.props.server.IsRunning ? setInterval(() => \r\n                { this.tick()}, 1000) : null}\r\n            this.setState({IntervalId : this.myInterval})\r\n            console.log(this.state.count)\r\n    }\r\n\r\n   componentDidUpdate(){\r\n       //console.log(this.state.count)\r\n       \r\n   }\r\n\r\n    tick() {\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n        this.props.TogglePrice(this.props.server,this.state.count)\r\n    }\r\n\r\n    \r\n    render () {\r\n        {\r\n            var hour = Math.floor(this.state.count/3600),\r\n            minutes = Math.floor((this.state.count - hour*3600)/60),\r\n            seconds = (this.state.count - hour*3600 -minutes*60 ),\r\n            temp = new Date(); \r\n            temp.setHours(hour, minutes, seconds);\r\n        }\r\n        \r\n        return(\r\n            <div>\r\n                {temp.getHours()}:{temp.getMinutes()}:{temp.getSeconds()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timer;","import React , { Component } from 'react';\r\nimport { Table, Button } from 'reactstrap';\r\nimport Timer from './Timer'\r\n\r\n\r\n/*function toggleFunction(server){\r\n    server.IsRunning = server.IsRunning ? false : true\r\n    console.log(server)\r\n    console.log(server.IsRunning)\r\n}*/\r\n\r\n/*function RenderServerRow({ server, onClick, TogglerFunction }) {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\" colSpan = \"1\">{server.ip}</th>\r\n            <td colSpan = \"2\">{server.servername}</td>\r\n            <td colSpan = \"2\"><Timer server = {server}/></td>\r\n            <td colSpan = \"2\"><Button color=\"primary\" onClick={() => TogglerFunction(server.id)}>Toggle</Button></td>\r\n            <td colSpan = \"1\">{server.Type}</td>\r\n            <td colSpan = \"2\">0</td>\r\n            <td colSpan = \"2\"> <Button color=\"primary\" onClick={() => onClick(server.id)}>Delete</Button></td>\r\n            {/*<td onClick={() => onClick(server.id)} colSpan = \"2\">0</td>}\r\n        </tr>\r\n    );\r\n}\r\n\r\n/*const ServersTable = (props) => {\r\n    const table = props.servers.map((server) => {\r\n        return (\r\n            <div key={server.id}>\r\n                <Table responsive>\r\n                    <thead>\r\n                        <tr>\r\n\r\n                            <th colSpan = \"1\">IP</th>\r\n                            <th colSpan = \"2\">Server Name</th>\r\n                            <th colSpan = \"2\">Time Running</th>\r\n                            <th colSpan = \"2\">Toggle</th>\r\n                            <th colSpan = \"1\">Type</th>\r\n                            <th colSpan = \"2\">Price</th>\r\n                            <th colSpan = \"2\">Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <RenderServerRow server={server} onClick={props.onClick} TogglerFunction = {props.togglerFunction}/>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row row-header\">\r\n                <div className=\"col-12\">\r\n                    {table}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}*/\r\n\r\nclass ServerTable extends Component{\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            count : 0\r\n        }\r\n\r\n        this.RenderServerRow = this.RenderServerRow.bind(this);\r\n    }\r\n\r\n    RenderServerRow({ servers, onClick, TogglerFunction }) {\r\n        \r\n       \r\n\r\n        return (\r\n            servers.map((server) => \r\n            <tr key = {server.id}>\r\n                <th scope=\"row\" colSpan = \"1\">{server.ip}</th>\r\n                <td colSpan = \"2\">{server.servername}</td>\r\n                <td colSpan = \"2\"><Timer server = {server} TogglePrice = {this.props.TogglePrice}  key = {server.IsRunning}/></td>\r\n                <td colSpan = \"2\"><Button color=\"primary\" onClick={() => TogglerFunction(server.id)}>Toggle</Button></td>\r\n                <td colSpan = \"1\">{server.Type}</td>\r\n                <td colSpan = \"2\">{server.price}</td>\r\n                <td colSpan = \"2\"> <Button color=\"primary\" onClick={() => onClick(server.id)}>Delete</Button></td>\r\n            </tr>)\r\n        );\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className = \"container\">\r\n                 \r\n                    <Table responsive>\r\n                        <thead>\r\n                            <tr>\r\n    \r\n                                <th colSpan = \"1\">IP</th>\r\n                                <th colSpan = \"2\">Server Name</th>\r\n                                <th colSpan = \"2\">Time Running</th>\r\n                                <th colSpan = \"2\">Toggle</th>\r\n                                <th colSpan = \"1\">Type</th>\r\n                                <th colSpan = \"2\">Price</th>\r\n                                <th colSpan = \"2\">Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {<this.RenderServerRow servers={this.props.servers} onClick={this.props.onClick} TogglerFunction = {this.props.togglerFunction}/>}\r\n                        </tbody>\r\n                    </Table>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ServerTable;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\n\r\n\r\nclass FormComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            servername: '',\r\n            serverip: '',\r\n            servertype: '',\r\n            currency: 'USD'\r\n        }\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n        if(name === \"currency\"){\r\n            this.props.ToggleType(value);\r\n        }\r\n        this.forceUpdate()\r\n        console.log(\"Current State is: \" + JSON.stringify(this.state)); \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                        <Form>\r\n                            <FormGroup row>\r\n                                <Col md={{ size: 2, offset: 10 }}>\r\n                                    <Input type=\"select\" name=\"currency\"\r\n                                        value={this.state.currency}\r\n                                        onChange={this.handleInputChange}>\r\n                                        <option>{\"USD\"}</option>;\r\n                                        <option>{\"EUR\"}</option>;\r\n                                        <option>{\"ILS\"}</option>;\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <div>\r\n                                    .\r\n                                </div>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label for=\"servername\" md={2}>Server Name</Label>\r\n                                <Col md={3}>\r\n                                    <Input type=\"text\" id=\"servername\" name=\"servername\"\r\n                                        placeholder=\"Server Name\" value={this.state.servername}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                                <Label for=\"serverip\" md={2}>Server IP</Label>\r\n                                <Col md={3}>\r\n                                    <Input type=\"text\" id=\"serverip\" name=\"serverip\"\r\n                                        placeholder=\"Server IP\" value={this.state.serverip}\r\n                                        onChange={this.handleInputChange} />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label for=\"servertype\" md={2}>Server Type</Label>\r\n                                <Col md={{ size: 4 }}>\r\n                                    <Input type=\"select\" name=\"servertype\"\r\n                                        value={this.state.servertype} \r\n                                        onChange={this.handleInputChange}>\r\n                                        <option>{\"t1.nano\"}</option>\r\n                                        <option>{\"t1.xl\"}</option>\r\n                                        <option>{\"t2.xxl\"}</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{ size: 3, offset: 6 }}>\r\n                                    <Button type = {\"button\"} onClick = {() => this.props.handleAddServer(this.state.servername, this.state.serverip, this.state.servertype)} color=\"primary\">\r\n                                        Add Server\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\r\n\r\nfunction Footer(props) {\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-auto\">\r\n                        <p>© Copyright Guy Paiss</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Footer;","export const SERVERS = \r\n[\r\n    {\r\n        id: 0,\r\n        ip: '127.0.0.1',\r\n        servername: 'Server1',\r\n        Type: 't1.nano',\r\n        IsRunning: true,\r\n        price: '0'\r\n    },\r\n    {\r\n        id: 1,\r\n        ip: '127.0.0.2',\r\n        servername: 'Server2',\r\n        Type: 't1.nano',\r\n        IsRunning: false,\r\n        price: '0'\r\n    }\r\n];","import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport ServersTable from './ServersTableComponent';\r\nimport FormComponent from './FormComponent';\r\nimport Footer from './FooterComponent';\r\nimport { SERVERS } from '../shared/servers';\r\n\r\nclass Main extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            servers: SERVERS,\r\n            currency: '$'\r\n        }\r\n\r\n        this.handleToggle = this.ToggleServer.bind(this);\r\n        this.HandleAddServer = this.HandleAddServer.bind(this);\r\n        this.ToggleType = this.ToggleType.bind(this);\r\n        this.TogglePrice = this.TogglePrice.bind(this);\r\n    }\r\n\r\n    ToggleType(type){\r\n        const serverslist = [...this.state.servers];\r\n        if(type === 'USD'){\r\n            this.setState({currency : '$'});\r\n        }\r\n        else if(type === 'EUR'){\r\n            this.setState({currency : '€'});\r\n        }\r\n        else{\r\n            this.setState({currency : '₪'});\r\n        }\r\n        serverslist.map((server) => {\r\n            if(server.IsRunning === false){\r\n                server.price = '0';\r\n            }\r\n        });\r\n        this.forceUpdate()\r\n    }\r\n\r\n    TogglePrice(server,count){\r\n        const serverslist = [...this.state.servers];\r\n        const myfunction = (serv) => serv.id===server.id\r\n        const serverIndex = serverslist.findIndex(myfunction);\r\n        let x = count;\r\n        if(this.state.currency ==='$'){\r\n            serverslist[serverIndex].price = ((parseFloat((0.1*x/60)).toFixed(3)).toString() + this.state.currency)\r\n        }\r\n        else if(this.state.currency ==='€'){\r\n            serverslist[serverIndex].price = ((parseFloat((0.08*x/60)).toFixed(3)).toString() + this.state.currency)\r\n        }\r\n        else{\r\n            serverslist[serverIndex].price = ((parseFloat((0.2*x/60)).toFixed(3)).toString() + this.state.currency)\r\n        }\r\n        //serverslist[serverIndex].price = count;\r\n        this.setState({ servers: serverslist });\r\n    }\r\n\r\n    HandleAddServer = (servername , serverip, servertype) => {\r\n        const serverslist = [...this.state.servers];\r\n        const newid = serverslist[serverslist.length -1].id +1;\r\n        \r\n       /* serverslist.push({\r\n            \r\n                ip: serverip,\r\n                id: newid,\r\n                servername: servername,\r\n                Type: servertype,\r\n                IsRunning: false\r\n\r\n        });\r\n         \r\n        this.setState({ servers: serverslist });*/\r\n        this.setState({\r\n            servers: [\r\n              ...this.state.servers,\r\n              {\r\n                ip: serverip,\r\n                id: newid,\r\n                servername: servername,\r\n                Type: servertype===\"\"? \"t1.nano\":servertype ,\r\n                IsRunning: false,\r\n                price: ('0')\r\n              },\r\n            ],\r\n          });\r\n          return false;\r\n    }\r\n\r\n    DeleteServer(serverId) {\r\n        const serverslist = [...this.state.servers];\r\n        const serverIndex = serverslist.findIndex(serv => serv.id === serverId);\r\n        serverslist.splice(serverIndex, 1);\r\n        this.setState({ servers: serverslist })\r\n    }\r\n\r\n    ToggleServer(serverId) {\r\n        const serverslist = [...this.state.servers];\r\n        let serverIndex = serverslist.findIndex(serv => serv.id === serverId);\r\n        serverslist[serverIndex].IsRunning = (serverslist[serverIndex].IsRunning ? false : true);\r\n        //server.IsRunning = server.IsRunning ? false : true\r\n        this.setState({ servers: serverslist });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        console.log(\"Unmount\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Header />\r\n                <ServersTable bordered={true} servers={this.state.servers} onClick={(serverId) => this.DeleteServer(serverId)} \r\n                togglerFunction={(server) => this.ToggleServer(server)} TogglePrice = {(server,count) => this.TogglePrice(server,count)} />\r\n                <FormComponent handleAddServer = {this.HandleAddServer} ToggleType = {this.ToggleType}/>\r\n                <Footer />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport Main from './components/MainComponent';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}